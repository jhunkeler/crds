#!/bin/csh -X
#-----------------------------------------------------------------------------
#	CDBS login TEMPLATE
#
# This file is a template of cdbs_login.csh, and is used by the automatic
# configuration generator.  You can add any additional definitions to the
# file created by the generator, but be aware that these will be lost if
# if you re-run the generator.
#
# Any names below prefixed by "_empty_" should get replaced by the 
# configuration generator.
#
# Your own version of this file should be placed in the directory
# defined below as cdbs_definitions_dir.
#
#            PR
#   DATE   NUMBER   User      Description
# -------- ------   ------    -------------------------------------
# 05/08/11 xxxxx    MSwam     copied from OPUS
#
#-----------------------------------------------------------------------------
#=================== BEGINNING OF USER-DEFINED VARIABLES =====================
#-----------------------------------------------------------------------------

# translate UNIX platform name into heritage CDBS name (legacy from Jtools)
#
 set platform = `/bin/uname -p`
 if ($platform == "sparc") then
   setenv OUR_PLATFORM sparc_solaris
 else if ($platform == "x86_64") then
   setenv OUR_PLATFORM linux
   # needs to go in front to avoid picking up system-level unwanted isql tool
   setenv PATH _empty_LINUX_PATH_ADDONS:${PATH}
 else if ($platform == "i686") then
   setenv OUR_PLATFORM linux
   setenv PATH _empty_LINUX_PATH_ADDONS:${PATH}
 else
   setenv OUR_PLATFORM $platform
 endif

# root override area (now required)
#
# The following dir must contain subdirs bin/sparc_solaris/ so it 
# will be added to path in foreach block below
 set overridebin = "_empty_OVERRIDE_ROOT"

 setenv CDBS_BASE _empty_ROOTDIR
 setenv CDBS_TOP  _empty_ROOTDIR
 setenv CDBS_DATA ${CDBS_TOP}/data/
 setenv SOGS_DISK "${overridebin} ${CDBS_BASE}"

# definitions override area (now required)
#
 setenv ODD _empty_DEFS_ROOT
 setenv CDBS_DEFINITIONS_DIR "$ODD SOGS_DISK:/data/"
#

 setenv CFITSIO_BASE _empty_CFITSIO_BASEDIR
 setenv CFITSIO_LIB ${CFITSIO_BASE}/lib/
#
# add SOGS_DISK entries to end of PATH if not already there and
# a bin/OUR_PLATFORM directory exists or 
# a bin/java subdirectory exists
#
 foreach i ($SOGS_DISK)
   foreach j ( bin bin/$OUR_PLATFORM  bin/java dbms/tools )
     set testdir = ${i}/${j}
     if (-d ${testdir}) then
       # make sure its not already in the path
       set atest = `echo $PATH | grep ${testdir}`
       if ($status == 1) then
         setenv PATH ${PATH}:${testdir}
       endif
     endif
   end
 end

#
# add to existing LD_LIBRARY_PATH
 setenv CDBS_LIB ${CDBS_BASE}/lib/${OUR_PLATFORM}
 setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${CDBS_LIB}:${CFITSIO_LIB}
#
#
setenv DB_TYPE     _empty_DB_TYPE
setenv DSQUERY     _empty_DSQUERY
setenv CDBS_SERVER _empty_CDBS_SERVER
setenv CDBS_DB     _empty_CDBS_DB
setenv REFFILE_SERVER _empty_REFFILE_SERVER
setenv REFFILE_DB     _empty_REFFILE_DB
setenv CDBS_EMAIL_DISTRIB _empty_CDBS_EMAIL_DISTRIB
#
# set the location of the SSB (Python) software (the new way)
#
setenv IRAFARCH $platform
if (${IRAFARCH} == "x86_64") then
  # adjustment for Linux
  setenv IRAFARCH redhat
endif
if (${IRAFARCH} == "sparc") then
  # adjustment for Solaris
  setenv IRAFARCH ssun
endif

set whichiraf     = _empty_SSB_VERSION
set whichiraftree = _empty_IRAF_BASEDIR
set ssb_stuff     = ${whichiraftree}/${whichiraf}
source ${ssb_stuff}/config.csh
#
# set PYTHONPATH for refxxx pipeline tasks and append to existing value
#
setenv MY_PY ${overridebin}/bin/${OUR_PLATFORM}
setenv CDBSPY ${CDBS_BASE}/bin/${OUR_PLATFORM}
setenv STDBPY _empty_STPYDB_BASEDIR
setenv PYTHONPATH ${MY_PY}:${CDBSPY}:${STDBPY}:${PYTHONPATH}
#
# NOTE: This is DIFFERENT from how OPUS does it.  OPUS currently relies
#       on a single ttab area for all synphot files, while CDBS keeps
#       a separate area for each instrument/telescope.
#
# set the reference file paths
setenv CDBS_REF _empty_REF_BASEDIR 
#
#setenv ttab        ${CDBS_REF}/thu/
# SHARED reference files
setenv mtab        ${CDBS_REF}/mtab/
setenv crotacomp   ${CDBS_REF}/comp/ota/
# ACS reference files
setenv jref        ${CDBS_REF}/jref/
setenv cracscomp   ${CDBS_REF}/comp/acs/
# WF2 reference files
setenv uref        ${CDBS_REF}/uref_linux/
setenv crwfpc2comp ${CDBS_REF}/comp/wfpc2/
# STIS reference files
setenv oref        ${CDBS_REF}/oref/
setenv crstiscomp   ${CDBS_REF}/comp/stis/
# NIC  reference files
setenv nref        ${CDBS_REF}/nref/
setenv crnicmoscomp   ${CDBS_REF}/comp/nicmos/
# WFC3 reference files
setenv iref        ${CDBS_REF}/iref/
setenv crwfc3comp  ${CDBS_REF}/comp/wfc3/
# COS reference files
setenv lref        ${CDBS_REF}/lref/
setenv crcoscomp   ${CDBS_REF}/comp/cos/
#
## Possible report levels (uncomment as needed).  Default is INFO.
## Available levels: INFO or DEBUG (all) 
##
# setenv cdbs_debug ON 
#
## DEBUGGING for Python tasks using STPYDB database interface
# setenv STPYDB_DEBUG on
# setenv STPYDB_DEBUG_FILE file_for_debug_msgs
##
## Possible database report levels (uncomment as needed).  Default is STDB_ERR.
## (only see output when there is an error).  See OSTDB2.0 manual for info.
## If STDB_REPORT_FILE is not defined, messages go into process log file (good).
## Known available levels: STDB_INFO   STDB_STAT   STDB_WARN   STDB_ERR
##
# setenv STDB_REPORT_LEVEL STDB_INFO
# setenv STDB_REPORT_FILE "<eg. $CDBS_HOME_DIR/stdb_info.out>"
#
# try to keep core files from overwriting previous ones
if ($OUR_PLATFORM == "sparc_solaris") then
  /usr/bin/coreadm -p "core.%p" $$
endif
#
# Set unlimited process resources
unlimit
#====================== CDBS_LOGIN completed.  ===============================
## 
