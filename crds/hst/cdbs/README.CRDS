Keep track of any expedient CRDS hacks here since they will have to be
added back later when updates are received for these files from CDBS.

Added custom hacks for WFC3 FLSHFILE since CDBS isn't entirely
consistent and CRDS doesn't use the information identically.

Essential problem is that datasets use values of FLASHCUR of "OFF" or
"ZERO" or "ZEROCUR".  FLSHFILE is irrelevant for these cases, there
are no references for them.

CRDS Solution #1:

1.  Add rmap relevance rule to eliminate FLSHFILE for these values of
FLASHCUR.  See reference_file_defs.xml.

2.  Add these values to TPN's so CRDS won't reject dataset headers
containing them, since CRDS will filter out these cases as irrelevant
using (1).  See wfc3_fls.tpn and wfc3_fls_ld.tpn

CRDS Solution #2:

The problem with #1 was that even with CRDS answering "filekind is
N/A" for appropriate cases, CDBS was still giving a bogus file, so a
mismatch still occurs and arguably should:  Is it really N/A?  or
does CRDS just think it's N/A while CDBS is recommending something
real?  So the solution is to mimic CDBS's bogus but consistent
recommendation in CRDS:

1. Remove FLSHFILE relevance restriction in reference_file_defs.xml
since CDBS always gives answers anyway.  These are just bad answers
which CRDS will replicate.  FLSHFILE is then *always* relevant, the
answer just won't get used for real.

2. Add hack to wfc3.py rmap customization filter to add a special case
for ZERO|ZEROCUR|OFF to map to the consistently bogus answer from CDBS.

In this case both CDBS and CRDS recommend the same bogus file which
no one will use.. and there are no comparison test errors.

