#! /bin/sh 

# usage:  unsafe_sync <options for crds.sync>
#
#   options:  none
#
#   requires:  
#        CRDS_PATH        (cache directory)
#        CRDS_LOCKS       (locks directory,  defaults CRDS_PATH)
#        CRDS_SERVER_URL  (server synced from)
#
# The "unsafe" aspect of this script is that it blocks safe_bestrefs,
# potentially stalling the pipeline.  To mitigate,  unsafe_sync is
# run immediately following safe_sync,  without --fetch-references,
# and a fixed set of parameters.

# Use an flock to prevent multiple concurrent syncs, safe or unsafe.  This
# is important for "cron collisions" when say reference transfers might
# take longer than the cron period.

# Use another flock to prevent concurrent unsafe_syncs and safe_bestrefs.
# This is important to keep safe_bestrefs from seeing an inconsistent cache.

# The intent of this organization is that safe_sync (elsewhere in a cron job)
# does the heavy lifting of data transfer.  With references and mappings
# already sync'ed, unsafe_sync should be able to rapidly update the cache
# config area, 20 seconds or so.  The "config-only" nature of unsafe_sync is
# circumstantial, depending on the orchestration of safe_sync and unsafe_sync
# by the all encompassing cron_sync.  If configured to transfer references,
# and new references become available, unsafe_sync will transfer them
# while blocking safe_bestrefs.  So don't run it with --fetch-references
# unless you have a special reason to do so.

# Common code and settings between safe and unsafe_sync
. crds_sync_env

# First tier is sync-to-sync blocking
( flock --exclusive --nonblock 200 
  if [[ $? == 1 ]]
  then # fail immediately if lock unavailable 
      echo "unsafe_sync: WARNING: failed to obtain crds.sync.lock"
      exit 1
  else 
      echo "unsafe_sync: INFO: obtained crds.sync.lock"
      # Second tier is unsafe_sync-to-safe_bestrefs blocking
      ( flock --exclusive 201  # wait indefinitely for bestrefs
    	   chmod 664 ${CRDS_PATH}/config/{hst,jwst}/* >& /dev/null 
	       python -m crds.sync --last 1 --verbose --stats
	       chmod 444 ${CRDS_PATH}/config/{hst,jwst}/* >& /dev/null
      ) 201> ${CRDS_LOCKS}/crds.config.lock 
  fi
) 200> ${CRDS_LOCKS}/crds.sync.lock 
exit 0

