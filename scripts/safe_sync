#! /bin/sh 

# usage:  safe_sync 
#
#   options:  --fetch-references --verbose --check-files [recommended --last 5]
#
#   requires:  
#        CRDS_PATH        (cache directory)
#        CRDS_LOCKS       (locks directory, defaults CRDS_PATH)
#        CRDS_SERVER_URL  (server synced from)
#
# This script is intended to be run in a cron job at a relatively high rate,
# say once every 10 minutes.

# The main purpose of safe_sync is to perform bulk data transfers of
# new references and rules which are not yet in operational use.  This
# script will not update the operational context so running it will
# not put the newly downloaded files into effect, it just pre-caches
# them. New files should become sync'able as soon as they are archived
# at STScI.  The default operational context is changed by running
# unsafe_sync.   The default context is controlled by the STScI pipeline
# and updated at some point after files are archived.

# safe_sync renders the config area of the CRDS cache readonly, so it
# will not update the config area, and any bestrefs running in
# parallel processses won't see partial updates to the config area or
# perform their own (successful) updates either.  safe_sync does not
# block safe_bestefs with a lock.  safe_sync blocks itself and
# unsafe_sync from concurrent runs using crds.sync.lock.

# To prevent a long queue of blocked sync cron jobs,  cron jobs which
# trigger during an on-going cron_sync fail immediately.  Subsequent
# cron jobs resume normally.

# Common code and settings between safe and unsafe_sync
. crds_sync_env

# Since  reference syncs take a  long time,  try to  make them  robust against
# simple server reboots.  Let it try for 10 minutes, maybe someone had to patch
# the CRDS  server VM or something.   (Simple server restarts  are usually only
# 1-2 minutes, rebooting Linux and doing something might take more time.)
# A reboot will kill any download,  but retries will make sync attempt it
# again,  making a good sync more likely without requiring --repair-files
# or --check-sha1sum.
export CRDS_CLIENT_RETRY_COUNT=60
export CRDS_CLIENT_RETRY_DELAY_SECONDS=10

# Single locking tier just excludes unsafe_sync or cron backlog
# --nonblock means immediate fail
# --exclusive means safe to write to cache,  no reference or mapping update collisions.
# chmod below means no config area updates,  operational context, etc.  won't change.
( flock --exclusive --nonblock 200 # --nonblock means fail on unavailable locks
  if [[ $? == 1 ]]
  then
    echo "safe_sync: WARNING: failed to obtain crds.sync.lock"
    exit 1
  else
    echo "safe_sync: INFO: obtained crds.sync.lock"
    chmod 444 ${CRDS_PATH}/config/{hst,jwst}/* >& /dev/null 
    python -m crds.sync $* --verbose --stats --dont-update-config
  fi
) 200> ${CRDS_LOCKS}/crds.sync.lock 
exit 0

