#! /bin/sh 

# usage:  cron_sync
#
#    options:  --fetch-references --verbose --check-files --check-sha1sum
#
#   requires:  
#        CRDS_PATH        (cache directory)
#        CRDS_SERVER_URL  (server synced from)
#        CRDS_LOCKS       (locks directory)
#
# This script is intended to be run in a cron job at a relatively high
# rate, say once every 30 minutes.  
#
# Several things should be considered for cron rate:
#
#   latency     --  the rate at which cron_sync will notice new files.
# 
#   reliability --  the chance that the unsafe_sync will wind up
#                   transferring reference data while bestrefs is
#                   blocked.
#
#   system load  -- doing both safe and unsafe syncs currently runs
#                   for about a minute,  presumably using primarily
#                   CPU and network,  not memory or disk.

# safe_sync does bulk reference and mappings transfers without blocking
# parallel pipeline bestrefs.  It may run for hours.

export CRDS_CLIENT_RETRY_COUNT=20
export CRDS_CLIENT_RETRY_DELAY_SECONDS=10

# default CRDS_LOCKS to CRDS_PATH unless it is known that the CRDS_PATH
# file system has broken flock's
if [[ -z "$CRDS_LOCKS" ]]
then
    export CRDS_LOCKS="$CRDS_PATH"
fi

safe_sync $*
if [[ $? != 1 ]]
then
    # unsafe_sync blocks pipeline bestrefs,  but with near certainty,
    # it should only run for 30 seconds to update the config area.
    unsafe_sync  $*
fi
exit $?

#  Summarizing overall design of sync + bestrefs at remote sites:
#
#   crds.sync.lock ensures that no two syncs run concurrently.
#   The nominal safe_sync rate for background reference transfer,
#   i.e. reference pre-positioning, is once every 30 minutes.  If
#   there's nothing new,  not much happens.   If there are new files,
#   safe_sync might run longer than 30 minutes.  So there is latency,
#   and there is duration.  30 minutes,  maybe several hours and
#   indeterminate.
#
#   crds.config.lock ensures that unsafe_sync and safe_bestrefs
#   do not concurrently use or modify the cache config area.
#
#   chmod'ing the config area readonly ensures that neither cron'ed
#   safe_sync nor parallel safe_bestrefs can modify the config area,
#   without using a lock which would also serialize parallel bestrefs.
#   both attempt to update the config area and fail silently unless
#   --verbose is used,  which emits warnings.
#
#   chmod'ing the config area read-write enables unsafe_sync to modify
#   it, but safe_sync and safe_bestrefs are both excluded by
#   crds.sync.lock (immediate fail) and crds.config.lock (5 minute
#   timeout) respectively.  unsafe_sync fails immediately for
#   crds.sync.lock (vs. safe_sync) and blocks on crds.config.lock
#   (vs. safe_bestrefs) indefinitely.
#
#   As a fail-safe measure,  presuming a "little concurrency risk"
#   is better than a total fail,  safe_bestrefs only waits on the
#   crds.config.lock for 3 minutes... then proceeds unconcerned.
#   Currently unsafe_sync runs around 30 seconds.

# There is a small design flaw here where new rules or references
# become available during safe_sync... and since they're missed, are
# then transferred while unsafe_sync has bestrefs blocked out.  Since
# reference transfers typically take many minutes, safe_bestrefs is
# designed to abandon concurrency control in that case and proceed,
# risking concurrency issues.  Since reference transfers take the bulk
# of the blocked time, and the config sync should happen in the first
# 30 seconds, the only remaining issue is bestrefs-to-bestrefs updates
# of the config area.  In that case, parallel bestrefs will all be
# writing the config area with the same unchanged static info they
# read in... presumably all identical but perhaps truncating the
# config for some reader.  Next release for that.
